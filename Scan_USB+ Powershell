import webbrowser
import os
import html
from datetime import datetime
import platform
import subprocess
import re

def detecter_ports_usb():
    """D√©tecte tous les ports USB de l'appareil et retourne une liste d√©taill√©e."""
    systeme = platform.system()
    ports_usb = []

    try:
        if systeme == "Windows":
            # Utilise PowerShell pour d√©tecter les p√©riph√©riques USB
            cmd = 'powershell "Get-PnpDevice -Class USB | Select-Object Status, FriendlyName, InstanceId"'
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True, timeout=10)

            if result.returncode == 0:
                lignes = result.stdout.strip().split('\n')
                for ligne in lignes[3:]:  # Skip header
                    if ligne.strip():
                        parts = ligne.split(maxsplit=2)
                        if len(parts) >= 3:
                            status = parts[0].strip()
                            nom = parts[1].strip()
                            instance_id = parts[2].strip()
                            ports_usb.append({
                                "nom": nom,
                                "status": status,
                                "instance_id": instance_id,
                                "type": "USB"
                            })

        elif systeme == "Linux":
            # Utilise lsusb pour Linux
            result = subprocess.run(['lsusb'], capture_output=True, text=True, timeout=10)

            if result.returncode == 0:
                lignes = result.stdout.strip().split('\n')
                for ligne in lignes:
                    if ligne.strip():
                        # Format: Bus 001 Device 002: ID 8087:8000 Intel Corp.
                        match = re.search(r'Bus\s+\d+\s+Device\s+\d+:\s+ID\s+[\w:]+\s+(.+)', ligne)
                        if match:
                            ports_usb.append({
                                "nom": match.group(1).strip(),
                                "status": "OK",
                                "instance_id": ligne.split(':')[0].strip(),
                                "type": "USB"
                            })

        elif systeme == "Darwin":  # macOS
            # Utilise system_profiler pour macOS
            result = subprocess.run(['system_profiler', 'SPUSBDataType'],
                                  capture_output=True, text=True, timeout=10)

            if result.returncode == 0:
                lignes = result.stdout.split('\n')
                current_device = {}
                for ligne in lignes:
                    if 'Product ID:' in ligne:
                        if current_device:
                            ports_usb.append(current_device)
                        current_device = {"nom": ligne.split(':')[1].strip(), "status": "OK", "instance_id": "", "type": "USB"}
                    elif 'Vendor ID:' in ligne:
                        current_device["instance_id"] = ligne.split(':')[1].strip()
                if current_device:
                    ports_usb.append(current_device)

    except Exception as e:
        print(f"‚ö† Erreur lors de la d√©tection USB : {e}")
        return []

    return ports_usb

def analyser_systeme():
    """R√©cup√®re les informations syst√®me et les ports USB."""
    est_admin = False
    try:
        if platform.system() == "Windows":
            import ctypes
            est_admin = ctypes.windll.shell32.IsUserAnAdmin() != 0
        else:  # Linux/Mac
            est_admin = os.getuid() == 0
    except:
        est_admin = False

    print("üîç Analyse des ports USB en cours...")
    ports_usb = detecter_ports_usb()

    return {
        "systeme": platform.system(),
        "version": platform.version(),
        "processeur": platform.processor(),
        "ports_usb_details": ports_usb,
        "nb_usb": len(ports_usb),
        "est_admin": est_admin
    }

def afficher_infos_systeme(infos):
    """Affiche les informations syst√®me."""
    print("\nAnalyse du syst√®me en cours...\n")
    print(f"Syst√®me d√©tect√© : {infos['systeme']}")
    print(f"Version : {infos['version']}")
    print(f"Processeur : {infos['processeur']}")
    print(f"Nombre de ports USB d√©tect√©s : {infos['nb_usb']}")

    type_utilisateur = "üëë Administrateur" if infos['est_admin'] else "üë§ Utilisateur standard"
    print(f"Type de compte : {type_utilisateur}")

def generer_html(reponses):
    """G√©n√®re le contenu HTML du rapport avec les d√©tails des ports USB."""
    contenu = """<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Rapport d'analyse syst√®me</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 20px;
            background-color: #f5f5f5;
        }
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background-color: white;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        h1, h2 {
            color: #333;
            border-bottom: 2px solid #4CAF50;
            padding-bottom: 10px;
        }
        table {
            border-collapse: collapse;
            width: 100%;
            margin-top: 20px;
            font-size: 0.9em;
        }
        th, td {
            border: 1px solid #ddd;
            padding: 10px;
            text-align: left;
        }
        th {
            background-color: #4CAF50;
            color: white;
            font-weight: bold;
        }
        tr:nth-child(even) {
            background-color: #f9f9f9;
        }
        tr:hover {
            background-color: #f1f1f1;
        }
        .badge {
            display: inline-block;
            padding: 4px 8px;
            border-radius: 4px;
            font-size: 0.85em;
            font-weight: bold;
        }
        .badge-admin {
            background-color: #ff9800;
            color: white;
        }
        .badge-user {
            background-color: #2196F3;
            color: white;
        }
        .footer {
            margin-top: 20px;
            text-align: center;
            color: #666;
            font-size: 0.9em;
        }
        .usb-details {
            margin-top: 20px;
            background-color: #f9f9f9;
            padding: 15px;
            border-radius: 5px;
        }
        .usb-details h3 {
            margin-top: 0;
            color: #4CAF50;
        }
        .usb-table {
            margin-top: 10px;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>üìä Historique des analyses USB</h1>
        <p><strong>Nombre total d'analyses :</strong> """ + str(len(reponses)) + """</p>
        <table>
            <thead>
                <tr>
                    <th>#</th>
                    <th>Nom d'utilisateur</th>
                    <th>Pr√©nom d'utilisateur</th>
                    <th>Poste</th>
                    <th>Type de compte</th>
                    <th>Syst√®me</th>
                    <th>Processeur</th>
                    <th>Nombre de ports USB</th>
                    <th>Date et Heure</th>
                </tr>
            </thead>
            <tbody>
"""

    for idx, r in enumerate(reponses, 1):
        badge_class = "badge-admin" if r['est_admin'] else "badge-user"
        badge_text = "Administrateur" if r['est_admin'] else "Utilisateur"

        contenu += f"""                <tr>
                    <td>{idx}</td>
                    <td>{html.escape(r['nom_utilisateur'])}</td>
                    <td>{html.escape(r['prenom_utilisateur'])}</td>
                    <td>{html.escape(r['poste'])}</td>
                    <td><span class="badge {badge_class}">{badge_text}</span></td>
                    <td>{html.escape(r['systeme'])}</td>
                    <td>{html.escape(r['processeur'])}</td>
                    <td>{html.escape(str(r['nb_usb']))}</td>
                    <td>{html.escape(r['date_heure'])}</td>
                </tr>
                <tr>
                    <td colspan="9" class="usb-details">
                        <h3>üîå D√©tails des ports USB</h3>
                        <table class="usb-table">
                            <thead>
                                <tr>
                                    <th>Nom</th>
                                    <th>Statut</th>
                                    <th>ID</th>
                                </tr>
                            </thead>
                            <tbody>
"""

        for usb in r['ports_usb_details']:
            contenu += f"""                            <tr>
                                                <td>{html.escape(usb['nom'])}</td>
                                                <td>{html.escape(usb['status'])}</td>
                                                <td>{html.escape(usb.get('instance_id', 'N/A'))}</td>
                                            </tr>
"""
        contenu += """                            </tbody>
                        </table>
                    </td>
                </tr>
"""
    contenu += """            </tbody>
        </table>
        <div class="footer">
            <p>Rapport g√©n√©r√© automatiquement le """ + datetime.now().strftime("%d/%m/%Y √† %H:%M:%S") + """</p>
        </div>
    </div>
</body>
</html>
"""
    return contenu

def sauvegarder_et_ouvrir_rapport(reponses):
    """Sauvegarde le rapport HTML et l'ouvre dans le navigateur."""
    fichier_html = "rapport_usb.html"
    with open(fichier_html, "w", encoding="utf-8") as f:
        f.write(generer_html(reponses))

    chemin_absolu = os.path.abspath(fichier_html)
    print(f"\n‚úì Rapport g√©n√©r√© : {chemin_absolu}")
    webbrowser.open("file://" + chemin_absolu)

def main():
    """Fonction principale."""
    reponses_utilisateur = []
    print("=" * 50)
    print("   ANALYSEUR DE SYST√àME USB")
    print("=" * 50)

    while True:
        print("\n" + "-" * 50)
        nom_utilisateur = input("Nom d'utilisateur : ").strip()
        prenom_utilisateur = input("Pr√©nom d'utilisateur : ").strip()
        poste = input("Nom du poste ou num√©ro de poste : ").strip()

        if nom_utilisateur.lower() == "camara" and prenom_utilisateur.lower() == "ali":
            print(f"\nüëã Te revoil√†, {prenom_utilisateur} {nom_utilisateur} !")
        else:
            print(f"\nüëã Bonjour, {prenom_utilisateur} {nom_utilisateur} !")

        infos_systeme = analyser_systeme()
        afficher_infos_systeme(infos_systeme)

        reponses_utilisateur.append({
            "nom_utilisateur": nom_utilisateur,
            "prenom_utilisateur": prenom_utilisateur,
            "poste": poste,
            "systeme": infos_systeme["systeme"],
            "processeur": infos_systeme["processeur"],
            "ports_usb_details": infos_systeme["ports_usb_details"],
            "nb_usb": infos_systeme["nb_usb"],
            "est_admin": infos_systeme["est_admin"],
            "date_heure": datetime.now().strftime("%d/%m/%Y %H:%M:%S")
        })

        reponse = input("\nüîÑ Souhaitez-vous refaire une analyse ? (oui/non) : ").strip().lower()
        while reponse not in ["oui", "non"]:
            reponse = input("‚ùå R√©ponse invalide. R√©pondez par 'oui' ou 'non' : ").strip().lower()

        if reponse != "oui":
            print("\n‚úì Fin de l'analyse. G√©n√©ration du rapport...")
            break

    if reponses_utilisateur:
        sauvegarder_et_ouvrir_rapport(reponses_utilisateur)
        print("\nüëã Au revoir !")
    else:
        print("\n‚ö† Aucune analyse effectu√©e.")

if __name__ == "__main__":
    main()
